#!/usr/bin/env bash

set -e

CMD="$(basename "$0")"
# From: https://github.com/overleaf/overleaf/blob/main/services/clsi/app/js/LatexRunner.js#L16
declare -A ENGINE_FLAGS=()
ENGINE_FLAGS[latex]='-pdfdvi'
ENGINE_FLAGS[lualatex]='-lualatex'
ENGINE_FLAGS[pdflatex]='-pdf'
ENGINE_FLAGS[xelatex]='-xelatex'
# Formating codes
if [ "$TERM" != "dumb" ] && type tput >/dev/null; then
    # BOLD="$(tput bold)"
    RESET="$(tput sgr0)"
    COLOR1="$(tput setaf 1)"
    COLOR2="$(tput setaf 2)"
    COLOR3="$(tput setaf 3)"
else
    # BOLD=""
    RESET=""
    COLOR1=""
    COLOR2=""
    COLOR3=""
fi

err() {
    printf "${COLOR1}[$CMD] Err:${RESET} %s\n" "$@" 1>&2 && exit 2
}
warn() {
    printf "${COLOR3}[$CMD] Warn:${RESET} %s\n" "$@" 1>&2
}
info() {
    printf "${COLOR2}[$CMD] Info:${RESET} %s\n" "$@" 1>&2
}

usage() {
    printf "Easy breezy latex.

Spins up a latex docker image, monitors source files and builds on change.

Usage: %s [OPTIONS] [PROJECT_DIR] -- [EXTRA_ARGS]
  -h                          Show this message and exit.
  -m MAIN_DOCUMENT            The main document of the latex project.
  -e ENGINE                   Latex engine. [%s] {%s}
  -i IMAGE                    Docker image. [%s]
  -c                          Commit changes on exit.
  -1                          Don't monitor, build once and exit.
  PROJECT_DIR                 Root directory of the latex project. ['.']
  EXTRA_ARGS                  Extra arguments to pass to latexmk, e.g. --outdir=build/
" "$CMD" "$ENGINE" "$(
        IFS=,
        echo "${!ENGINE_FLAGS[*]}"
    )" "$IMAGE"
}

check_git() {
    git -C "$1" rev-parse 2>/dev/null
}

ENGINE="pdflatex"
IMAGE="loiccoyle/localleaf"
COMMIT_TRAP=0
BUILD_ONCE=0
PROJECT_DIR="."
EXTRA_ARGS=()

find_container_engine() {
    # Check if podman is available
    if command -v podman &>/dev/null; then
        echo "podman"
        return 0 # Success
    # Check if docker is available
    elif command -v docker &>/dev/null; then
        echo "docker"
        return 0 # Success
    else
        echo "Error: Neither 'podman' nor 'docker' container engine found in PATH." >&2
        return 1 # Failure
    fi
}

CONTAINER_ENGINE=$(find_container_engine)

if [ $? -eq 0 ]; then
    echo "Selected container engine: $CONTAINER_ENGINE"
else
    exit 1
fi

# find and extract everything after --
for ((i = 1; i <= $#; i++)); do
    if [[ "${!i}" == "--" ]]; then
        # get all args before --
        MAIN_ARGS=("${@:1:$((i - 1))}")
        # get all args after --
        EXTRA_ARGS=("${@:$((i + 1))}")
        # set positional parameters to just the main args
        set -- "${MAIN_ARGS[@]}"
        break
    fi
done

while getopts "e:i:m:o:1ch" opt; do
    case $opt in
    "h") usage && exit ;;
    "e")
        [[ -v ENGINE_FLAGS[$OPTARG] ]] || err "Unknown latex engine '$OPTARG'"
        ENGINE="$OPTARG"
        ;;
    "i") IMAGE="$OPTARG" ;;
    "m") MAIN_DOCUMENT="$OPTARG" ;;
    "1") BUILD_ONCE=1 ;;
    "c") COMMIT_TRAP=1 ;;
    ?) usage && exit 1 ;;
    esac
done

shift $((OPTIND - 1))

if [[ $# -gt 0 ]]; then
    PROJECT_DIR="$1"
fi

type "$CONTAINER_ENGINE" >/dev/null || err "'$CONTAINER_ENGINE' not found."

PROJECT_DIR="$(realpath "$PROJECT_DIR")"
PROJECT_DIR_NAME="$(basename "$PROJECT_DIR")"

[ -z "$PROJECT_DIR" ] && err "Missing PROJECT_DIR"
[ ! -d "$PROJECT_DIR" ] && err "'$PROJECT_DIR' is not a directory."

if [ "$COMMIT_TRAP" == 1 ]; then
    check_git "$PROJECT_DIR" || err "'$PROJECT_DIR' is not a git dir."
    # TODO: Check if the commit works
    trap 'git -C $PROJECT_DIR add -u && git commit -m "Update [localleaf]"' EXIT
fi

if [ -z "$MAIN_DOCUMENT" ]; then
    # Try to find a "main" document using find
    FIND_MAIN_FILE=($(find . -name "main*.tex"))

    if [ ${#FIND_MAIN_FILE[@]} -gt 0 ]; then
        # Sort FIND_MAIN_FILE by the length of each element (file path)
        # 1. Print each array element with its length
        # 2. Sort numerically by length
        # 3. Cut off the length, leaving only the file path
        # 4. Reassign to FIND_MAIN_FILE
        sorted_FIND_MAIN_FILE=($(printf "%s\n" "${FIND_MAIN_FILE[@]}" | awk '{ print length, $0 }' | sort -n | cut -d' ' -f2-))

        MAIN_DOCUMENT="${sorted_FIND_MAIN_FILE[0]}"
        warn "Using find to guess main document (sorted by path length): '$MAIN_DOCUMENT', use '-m' to specify main latex document."
    else
        # Fallback to the original method if it finds nothing
        ROOT_TEX_FILES=("$PROJECT_DIR"/*.tex)
        if [ ${#ROOT_TEX_FILES[@]} -gt 0 ] && [ -f "${ROOT_TEX_FILES[0]}" ]; then
            MAIN_DOCUMENT="${ROOT_TEX_FILES[0]}"
            warn "Guessing main document (fallback): '$MAIN_DOCUMENT', use '-m' to specify main latex document."
        else
            # Handle the case where no .tex files are found at all
            error "No .tex files found in '$PROJECT_DIR'. Cannot determine main document."
            exit 1 # Or handle as appropriate for your script
        fi
    fi
fi

[ -z "$MAIN_DOCUMENT" ] && err "Missing MAIN_DOCUMENT"
[ ! -f "$MAIN_DOCUMENT" ] && err "'$MAIN_DOCUMENT' not found."

# Based on: https://github.com/overleaf/overleaf/blob/main/services/clsi/app/js/LatexRunner.js#L153
if [ "$BUILD_ONCE" = 1 ]; then
    # Just build once
    LATEX_BUILD="
echo '$(info "Building once" 2>&1)'
latexmk -interaction=batchmode -f ${ENGINE_FLAGS[$ENGINE]} -synctex=1 $(realpath --relative-to="$PROJECT_DIR" "$MAIN_DOCUMENT") ${EXTRA_ARGS[*]}
echo '$(info "Latex build done" 2>&1)'
"
else
    # Monitor *.tex files recursively and run compilation when a change is detected.
    # When entr detects a new file in the monitored directory, it is added to the monitoring.
    # entr: https://manpages.org/entr
    LATEX_BUILD="
echo '$(info "Monitoring *.tex, *.cls and *.bib files" 2>&1)'
while sleep 1; do
    find -type f \( -name '*.tex' -o -name '*.cls' -o -name '*.bib' \) | entr -d sh -c '
    latexmk -interaction=batchmode -f ${ENGINE_FLAGS[$ENGINE]} -synctex=1 $(realpath --relative-to="$PROJECT_DIR" "$MAIN_DOCUMENT") ${EXTRA_ARGS[*]}
    echo \"$(info "Latex build done" 2>&1)\"
' && echo '$(info "Triple tap <C-c> to quit" 2>&1)'
done
"
fi

info "Triple tap <C-c> to quit"
info "Starting $CONTAINER_ENGINE container"

RUN_COMMAND="$CONTAINER_ENGINE run -it --rm"

# Conditionally add the --user flag for Docker (not needed for podman)
if [ "$CONTAINER_ENGINE" = "docker" ]; then
    RUN_COMMAND="$RUN_COMMAND --user \"$(id -u):$(id -g)\""
fi

$RUN_COMMAND \
    -v "$(realpath "$PROJECT_DIR")":"/$PROJECT_DIR_NAME:z" "$IMAGE" bash -ic "
cd /$PROJECT_DIR_NAME
$LATEX_BUILD
"
